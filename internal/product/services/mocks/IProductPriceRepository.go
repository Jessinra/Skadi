// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/trivery-id/skadi/internal/product/services (interfaces: IProductPriceRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "gitlab.com/trivery-id/skadi/internal/product/domain"
	repositories "gitlab.com/trivery-id/skadi/internal/product/repositories"
)

// MockIProductPriceRepository is a mock of IProductPriceRepository interface.
type MockIProductPriceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIProductPriceRepositoryMockRecorder
}

// MockIProductPriceRepositoryMockRecorder is the mock recorder for MockIProductPriceRepository.
type MockIProductPriceRepositoryMockRecorder struct {
	mock *MockIProductPriceRepository
}

// NewMockIProductPriceRepository creates a new mock instance.
func NewMockIProductPriceRepository(ctrl *gomock.Controller) *MockIProductPriceRepository {
	mock := &MockIProductPriceRepository{ctrl: ctrl}
	mock.recorder = &MockIProductPriceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProductPriceRepository) EXPECT() *MockIProductPriceRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockIProductPriceRepository) Add(arg0 context.Context, arg1 *domain.ProductPrice) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockIProductPriceRepositoryMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIProductPriceRepository)(nil).Add), arg0, arg1)
}

// Delete mocks base method.
func (m *MockIProductPriceRepository) Delete(arg0 context.Context, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIProductPriceRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIProductPriceRepository)(nil).Delete), arg0, arg1)
}

// Find mocks base method.
func (m *MockIProductPriceRepository) Find(arg0 context.Context, arg1 uint64) (*domain.ProductPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(*domain.ProductPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockIProductPriceRepositoryMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIProductPriceRepository)(nil).Find), arg0, arg1)
}

// FindAll mocks base method.
func (m *MockIProductPriceRepository) FindAll(arg0 context.Context, arg1 repositories.FindAllInput) ([]domain.ProductPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0, arg1)
	ret0, _ := ret[0].([]domain.ProductPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockIProductPriceRepositoryMockRecorder) FindAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockIProductPriceRepository)(nil).FindAll), arg0, arg1)
}

// Update mocks base method.
func (m *MockIProductPriceRepository) Update(arg0 context.Context, arg1 *domain.ProductPrice) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIProductPriceRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIProductPriceRepository)(nil).Update), arg0, arg1)
}
