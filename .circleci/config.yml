version: 2.1
orbs:
  aws-eks: circleci/aws-eks@1.1.0
jobs:
  lint:
    docker:
      - image: golangci/golangci-lint:latest-alpine
    steps:
      - checkout
      - run:
          name: Run golangci-lint
          command: | 
            golangci-lint run --config ./golangci.yml --timeout=15m
      - run:
          name: Install & run hadolint (docker linter)
          command: |
            # Install hadolint
            wget -O ./hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 && chmod +x ./hadolint

            # Run linter
            ./hadolint Dockerfile

  test:
    docker:
      - image: circleci/golang:1.17
    steps:
      - checkout
      - run:
          name: Run unit tests
          environment:
            ENV: test
            TEST_RUNNER: "CircleCI"
          command: |
            go test -v ./...

  build: 
    machine: true
    environment:
      ENV: dev
      GIN_MODE: debug
      SILENT_GORM: "false"
    steps:
      - checkout
      - run: 
          name: "docker login"
          command: echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
      - run: 
          name: "docker build and push"
          command: |
            export SHORT_GIT_HASH=$(echo $CIRCLE_SHA1 | cut -c -7)
            docker build -t trivery/skadi:$SHORT_GIT_HASH -t trivery/skadi:latest \
              --build-arg ENV=$ENV \
              --build-arg VERSION=$SHORT_GIT_HASH \
              --build-arg GIN_MODE=$GIN_MODE \
              --build-arg SILENT_GORM=$SILENT_GORM \
              --build-arg AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
              --build-arg AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY .
            docker push trivery/skadi

  deploy:
    executor: aws-eks/python3
    environment:
      NAMESPACE: eks-skadi
      CLUSTER_NAME: skadi
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: $CLUSTER_NAME
          install-kubectl: true
      - run:
          name: Test cluster
          command: kubectl get all -n $NAMESPACE
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: script/kubernetes/eks-deployment.yaml
          resource-name: deployment/eks-skadi

workflows:
  version: 2
  build-workflow:
    jobs:
      # - lint
      # - test
      # - build:
      #     requires:
      #       - lint
      #       - test
      - deploy
      - aws-eks/update-container-image:
          aws-region: ap-southeast-1
          namespace: eks-skadi
          cluster-name: skadi
          resource-name: deployment/eks-skadi
          container-image-updates: 'skadi=trivery/skadi:latest'
          get-rollout-status: true
          show-kubectl-command: true
          requires:
            - deploy